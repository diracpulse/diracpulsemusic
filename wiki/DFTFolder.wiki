#summary Contents of the DFT folder

== Overview ==

Conversion from PCM into the frequency domain (Time -> Frequency -> Amplitude)
is done in C for performance reasons.<br>
The algorithm resembles a DFT, but unlike the DFT, the length of the window
used is increased as the frequency decreased.<br>
Also, the number of frequencies analyzed per octave is constant (31)<br>
The frequency and amplitude at a particular time are calculated by a wavelet
centered about the sample at that particular time.<br>
Each wavelet has a maximum response to a particular frequency that decreases
as the input frequency is increased or decreased.<br>
If response(freq + 1) <= response(freq) >= response(freq - 1)
and response is above a particular minimum threshold,<br>
it is assumed that freq exists at that particular time and that amplitude == response<br>

== Compiling ==

*gcc main.c filter.c*<br>
(done under Windows Vista using MinGW and MSYS)<br>
Output: a.exe<br>

== Running ==

*a > out.txt*<br>
"input.wav" is used as input<br>
out.txt is read by DFTEditor.java<br>

== Files ==

*main.c:* takes a file input.wav and produces a TFA output.<br>
Output tokens are space delimited (three numbers per line) and terminated with a \n:<br>
`token[0] as int`<br>
`token[1] as int`<br>
`token[2] as float`<br>
`Time = (token[0] / 5ms)`<br>
`Frequency = 2.0 ^ (token[1] / 31.0)`<br> 
`Amplitude = 2.0 ^ (token[2])`<br>
<br>

*filter.c*: creates and tests Kaiser-Bessel windowed FIR filters<br>
Also used by main.c to create Kaiser-Bessel windows used in analysis<br>
<br>
*WAVFile.c*: code for creating the simplest form of WAV file<br>
<br>