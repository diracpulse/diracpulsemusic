#summary Contents of the DFT folder
#labels Featured

== Overview ==

Note: This algorithm differs from a standard DFT.  However, if you understand how a standard DFT works, you will understand how this algorithm works.

Conversion from PCM into TFA data (Time->Frequency->Amplitude)
is done in C for performance reasons.<br>
The algorithm resembles a DFT, but unlike the DFT, the length of the window
used is increased as the frequency decreased.<br>
Also, the number of frequencies analyzed per octave is constant (31)<br>
The frequencies and corresponding amplitudes at a particular time are calculated by multiplying sampled data by wavelets centered around that particular time.<br>
Each wavelet has a maximum response to a particular frequency that decreases
as the input frequency is increased or decreased.<br>
If response(freq + 1) <= response(freq) >= response(freq - 1)
and response is above a particular minimum threshold,<br>
it is assumed that freq exists at that particular time and that amplitude == response<br>

== Compiling ==

*gcc - O3 main.c filter.c*<br>
This was done under Windows Vista using MinGW and MSYS<br>
It is important to optimize for speed, since the algorithms are computationally intensive.<br>
Output: a.exe<br>

== Running ==

Place a.exe into the DFTEditor folder (same directory as DFTEditor.jar)<br>
"input.wav" is used as input<br>
stdout from a.exe is read by DFTEditor.jar, see !FileConvert.java <br>

== Files ==

*main.c:* takes a file input.wav and produces a matrix output. (see DataFormatsAndConstants)<br>

*filter.c*: creates and tests Kaiser-Bessel windowed FIR filters<br>
Also used by main.c to create Kaiser-Bessel windows used in analysis<br>
<br>
*WAVFile.c*: code for creating the simplest form of WAV file<br>
<br>